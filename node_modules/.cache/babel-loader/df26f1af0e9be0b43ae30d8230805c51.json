{"ast":null,"code":"import * as axios from \"axios\";\nimport store from \"../Redux/reduxStore.js\";\nimport { refreshToken, isAuth } from \"../Redux/Reducers/userReducer.js\";\nexport const API_URL = \"http://localhost:3001/api\";\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL\n});\n/**\r\n * Прикрепляем токены к запросам\r\n */\n\n$api.interceptors.request.use(config => {\n  config.headers.Authorization = \"Bearer \" + store.getState().user.token;\n  return config;\n});\n/**\r\n * Перезагрузка токена\r\n */\n\n$api.interceptors.response.use(config => {\n  return config;\n}, async error => {\n  const originalRequest = error.response.config;\n  console.log(error.response.status); // store.dispatch(isAuth(false));\n\n  if (error.response.status === 401 && error.response.config && !error.response.config.retry) {\n    console.log(\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJjjj\");\n    originalRequest.retry = true;\n\n    try {\n      const response = await axios.get(\"http://localhost:3001/api/refresh\", {\n        withCredentials: true\n      });\n      console.log(\"====================\");\n      console.log(response.data);\n      store.dispatch(refreshToken(response.data));\n      store.dispatch(isAuth(true));\n      return $api.request(originalRequest);\n    } catch (error) {\n      console.log(error);\n      return;\n    }\n  }\n\n  throw error;\n});\nexport default $api;","map":{"version":3,"sources":["A:/WorkPorjects/Skill Box/greencosmicStudy/Frontend/src/Http/index.js"],"names":["axios","store","refreshToken","isAuth","API_URL","$api","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","getState","user","token","response","error","originalRequest","console","log","status","retry","get","data","dispatch"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,kCAArC;AACA,OAAO,MAAMC,OAAO,GAAG,2BAAhB;AAEP,MAAMC,IAAI,GAAGL,KAAK,CAACM,MAAN,CAAa;AACxBC,EAAAA,eAAe,EAAE,IADO;AAExBC,EAAAA,OAAO,EAAEJ;AAFe,CAAb,CAAb;AAKA;AACA;AACA;;AACAC,IAAI,CAACI,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA+BC,MAAD,IAAY;AACxCA,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+B,YAAYb,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAjE;AAEA,SAAOL,MAAP;AACD,CAJD;AAKA;AACA;AACA;;AACAP,IAAI,CAACI,YAAL,CAAkBS,QAAlB,CAA2BP,GAA3B,CACGC,MAAD,IAAY;AACV,SAAOA,MAAP;AACD,CAHH,EAIE,MAAOO,KAAP,IAAiB;AACf,QAAMC,eAAe,GAAGD,KAAK,CAACD,QAAN,CAAeN,MAAvC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACD,QAAN,CAAeK,MAA3B,EAFe,CAGf;;AACA,MACEJ,KAAK,CAACD,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAJ,KAAK,CAACD,QAAN,CAAeN,MADf,IAEA,CAACO,KAAK,CAACD,QAAN,CAAeN,MAAf,CAAsBY,KAHzB,EAIE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAF,IAAAA,eAAe,CAACI,KAAhB,GAAwB,IAAxB;;AACA,QAAI;AACF,YAAMN,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,GAAN,CAAU,mCAAV,EAA+C;AACpElB,QAAAA,eAAe,EAAE;AADmD,OAA/C,CAAvB;AAGAc,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACQ,IAArB;AACAzB,MAAAA,KAAK,CAAC0B,QAAN,CAAezB,YAAY,CAACgB,QAAQ,CAACQ,IAAV,CAA3B;AACAzB,MAAAA,KAAK,CAAC0B,QAAN,CAAexB,MAAM,CAAC,IAAD,CAArB;AACA,aAAOE,IAAI,CAACK,OAAL,CAAaU,eAAb,CAAP;AACD,KATD,CASE,OAAOD,KAAP,EAAc;AACdE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;AACF;;AACD,QAAMA,KAAN;AACD,CA9BH;AAgCA,eAAed,IAAf","sourcesContent":["import * as axios from \"axios\";\r\nimport store from \"../Redux/reduxStore.js\";\r\nimport { refreshToken, isAuth } from \"../Redux/Reducers/userReducer.js\";\r\nexport const API_URL = \"http://localhost:3001/api\";\r\n\r\nconst $api = axios.create({\r\n  withCredentials: true,\r\n  baseURL: API_URL,\r\n});\r\n\r\n/**\r\n * Прикрепляем токены к запросам\r\n */\r\n$api.interceptors.request.use((config) => {\r\n  config.headers.Authorization = \"Bearer \" + store.getState().user.token;\r\n\r\n  return config;\r\n});\r\n/**\r\n * Перезагрузка токена\r\n */\r\n$api.interceptors.response.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.response.config;\r\n    console.log(error.response.status);\r\n    // store.dispatch(isAuth(false));\r\n    if (\r\n      error.response.status === 401 &&\r\n      error.response.config &&\r\n      !error.response.config.retry\r\n    ) {\r\n      console.log(\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJjjj\");\r\n      originalRequest.retry = true;\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/api/refresh\", {\r\n          withCredentials: true,\r\n        });\r\n        console.log(\"====================\");\r\n        console.log(response.data);\r\n        store.dispatch(refreshToken(response.data));\r\n        store.dispatch(isAuth(true));\r\n        return $api.request(originalRequest);\r\n      } catch (error) {\r\n        console.log(error);\r\n        return;\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n);\r\nexport default $api;\r\n"]},"metadata":{},"sourceType":"module"}