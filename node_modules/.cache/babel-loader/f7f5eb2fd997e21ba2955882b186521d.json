{"ast":null,"code":"import _regeneratorRuntime from\"A:/WorkPorjects/Skill Box/greencosmicStudy/Frontend/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"A:/WorkPorjects/Skill Box/greencosmicStudy/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as axios from\"axios\";import store from\"../Redux/reduxStore.js\";import{refreshToken,isAuth}from\"../Redux/Reducers/userReducer.js\";export var API_URL=\"https://greencosmic-api.vercel.app/api\";var $api=axios.create({withCredentials:true,baseURL:API_URL});/**\r\n * Прикрепляем токены к запросам\r\n */$api.interceptors.request.use(function(config){config.headers.Authorization=\"Bearer \"+store.getState().user.token;return config;});/**\r\n * Перезагрузка токена\r\n */$api.interceptors.response.use(function(config){return config;},/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(error){var originalRequest,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:originalRequest=error.response.config;console.log(error.response.status);// store.dispatch(isAuth(false));\nif(!(error.response.status===401&&error.response.config&&!error.response.config.retry)){_context.next=17;break;}originalRequest.retry=true;_context.prev=4;_context.next=7;return axios.get(\"http://localhost:3001/api/refresh\",{withCredentials:true});case 7:response=_context.sent;store.dispatch(refreshToken(response.data));store.dispatch(isAuth(true));return _context.abrupt(\"return\",$api.request(originalRequest));case 13:_context.prev=13;_context.t0=_context[\"catch\"](4);console.log(_context.t0);return _context.abrupt(\"return\");case 17:throw error;case 18:case\"end\":return _context.stop();}}},_callee,null,[[4,13]]);}));return function(_x){return _ref.apply(this,arguments);};}());export default $api;","map":{"version":3,"sources":["A:/WorkPorjects/Skill Box/greencosmicStudy/Frontend/src/Http/index.js"],"names":["axios","store","refreshToken","isAuth","API_URL","$api","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","getState","user","token","response","error","originalRequest","console","log","status","retry","get","dispatch","data"],"mappings":"yQAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,wBAAlB,CACA,OAASC,YAAT,CAAuBC,MAAvB,KAAqC,kCAArC,CACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,wCAAhB,CAEP,GAAMC,CAAAA,IAAI,CAAGL,KAAK,CAACM,MAAN,CAAa,CACxBC,eAAe,CAAE,IADO,CAExBC,OAAO,CAAEJ,OAFe,CAAb,CAAb,CAKA;AACA;AACA,GACAC,IAAI,CAACI,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,SAACC,MAAD,CAAY,CACxCA,MAAM,CAACC,OAAP,CAAeC,aAAf,CAA+B,UAAYb,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAjE,CAEA,MAAOL,CAAAA,MAAP,CACD,CAJD,EAKA;AACA;AACA,GACAP,IAAI,CAACI,YAAL,CAAkBS,QAAlB,CAA2BP,GAA3B,CACE,SAACC,MAAD,CAAY,CACV,MAAOA,CAAAA,MAAP,CACD,CAHH,0FAIE,iBAAOO,KAAP,+IACQC,eADR,CAC0BD,KAAK,CAACD,QAAN,CAAeN,MADzC,CAEES,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACD,QAAN,CAAeK,MAA3B,EACA;AAHF,KAKIJ,KAAK,CAACD,QAAN,CAAeK,MAAf,GAA0B,GAA1B,EACAJ,KAAK,CAACD,QAAN,CAAeN,MADf,EAEA,CAACO,KAAK,CAACD,QAAN,CAAeN,MAAf,CAAsBY,KAP3B,2BASIJ,eAAe,CAACI,KAAhB,CAAwB,IAAxB,CATJ,sCAW6BxB,CAAAA,KAAK,CAACyB,GAAN,CAAU,mCAAV,CAA+C,CACpElB,eAAe,CAAE,IADmD,CAA/C,CAX7B,QAWYW,QAXZ,eAeMjB,KAAK,CAACyB,QAAN,CAAexB,YAAY,CAACgB,QAAQ,CAACS,IAAV,CAA3B,EACA1B,KAAK,CAACyB,QAAN,CAAevB,MAAM,CAAC,IAAD,CAArB,EAhBN,gCAiBaE,IAAI,CAACK,OAAL,CAAaU,eAAb,CAjBb,4DAmBMC,OAAO,CAACC,GAAR,cAnBN,8CAuBQH,CAAAA,KAvBR,sEAJF,gEA8BA,cAAed,CAAAA,IAAf","sourcesContent":["import * as axios from \"axios\";\r\nimport store from \"../Redux/reduxStore.js\";\r\nimport { refreshToken, isAuth } from \"../Redux/Reducers/userReducer.js\";\r\nexport const API_URL = \"https://greencosmic-api.vercel.app/api\";\r\n\r\nconst $api = axios.create({\r\n  withCredentials: true,\r\n  baseURL: API_URL,\r\n});\r\n\r\n/**\r\n * Прикрепляем токены к запросам\r\n */\r\n$api.interceptors.request.use((config) => {\r\n  config.headers.Authorization = \"Bearer \" + store.getState().user.token;\r\n\r\n  return config;\r\n});\r\n/**\r\n * Перезагрузка токена\r\n */\r\n$api.interceptors.response.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.response.config;\r\n    console.log(error.response.status);\r\n    // store.dispatch(isAuth(false));\r\n    if (\r\n      error.response.status === 401 &&\r\n      error.response.config &&\r\n      !error.response.config.retry\r\n    ) {\r\n      originalRequest.retry = true;\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/api/refresh\", {\r\n          withCredentials: true,\r\n        });\r\n\r\n        store.dispatch(refreshToken(response.data));\r\n        store.dispatch(isAuth(true));\r\n        return $api.request(originalRequest);\r\n      } catch (error) {\r\n        console.log(error);\r\n        return;\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n);\r\nexport default $api;\r\n"]},"metadata":{},"sourceType":"module"}