{"ast":null,"code":"const SET_USER = \"SET_USER\";\nconst GET_USER = \"GET_USER\";\nconst REFRESH_TOKEN = \"REFRESH_TOKEN\";\nconst IS_AUTH = \"IS_AUTH\";\nlet initialState = {\n  token: \"\",\n  username: \"\",\n  _id: \"\",\n  role: \"\",\n  isAuth: false,\n  birthday: \"\",\n  phoneNumber: \"\",\n  city: \"\",\n  linkToInstagram: \"\",\n  linkToFacebook: \"\",\n  linkToLinkedIn: \"\"\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_BIRTHDAY:\n      return { ...state,\n        birthday: action.value\n      };\n\n    case SET_USER:\n      return { ...state,\n        token: action.user.token,\n        username: action.user.username,\n        _id: action.user._id,\n        role: action.user.role\n      };\n\n    case GET_USER:\n      debugger;\n      console.log(state);\n      break;\n\n    case IS_AUTH:\n      return { ...state,\n        isAuth: action.value\n      };\n\n    case REFRESH_TOKEN:\n      return { ...state,\n        token: action.value.accessToken,\n        username: action.value.user.username,\n        _id: action.value.user.id,\n        role: action.value.user.roles\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\nexport const setUser = user => ({\n  type: SET_USER,\n  user\n});\nexport const getUser = () => ({\n  type: GET_USER\n});\nexport const isAuth = value => ({\n  type: IS_AUTH,\n  value\n});\nexport const refreshToken = value => ({\n  type: REFRESH_TOKEN,\n  value\n});","map":{"version":3,"sources":["A:/WorkPorjects/Skill Box/greencosmicStudy/Frontend/src/Redux/Reducers/userReducer.js"],"names":["SET_USER","GET_USER","REFRESH_TOKEN","IS_AUTH","initialState","token","username","_id","role","isAuth","birthday","phoneNumber","city","linkToInstagram","linkToFacebook","linkToLinkedIn","userReducer","state","action","type","SET_BIRTHDAY","value","user","console","log","accessToken","id","roles","setUser","getUser","refreshToken"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,GAAG,EAAE,EAHY;AAIjBC,EAAAA,IAAI,EAAE,EAJW;AAKjBC,EAAAA,MAAM,EAAE,KALS;AAMjBC,EAAAA,QAAQ,EAAE,EANO;AAOjBC,EAAAA,WAAW,EAAE,EAPI;AAQjBC,EAAAA,IAAI,EAAE,EARW;AASjBC,EAAAA,eAAe,EAAE,EATA;AAUjBC,EAAAA,cAAc,EAAE,EAVC;AAWjBC,EAAAA,cAAc,EAAE;AAXC,CAAnB;;AAcA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBb,YAAyB;AAAA,MAAXc,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,YAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELP,QAAAA,QAAQ,EAAEQ,MAAM,CAACG;AAFZ,OAAP;;AAIF,SAAKrB,QAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELZ,QAAAA,KAAK,EAAEa,MAAM,CAACI,IAAP,CAAYjB,KAFd;AAGLC,QAAAA,QAAQ,EAAEY,MAAM,CAACI,IAAP,CAAYhB,QAHjB;AAILC,QAAAA,GAAG,EAAEW,MAAM,CAACI,IAAP,CAAYf,GAJZ;AAKLC,QAAAA,IAAI,EAAEU,MAAM,CAACI,IAAP,CAAYd;AALb,OAAP;;AAOF,SAAKP,QAAL;AACE;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA;;AACF,SAAKd,OAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELR,QAAAA,MAAM,EAAES,MAAM,CAACG;AAFV,OAAP;;AAIF,SAAKnB,aAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELZ,QAAAA,KAAK,EAAEa,MAAM,CAACG,KAAP,CAAaI,WAFf;AAGLnB,QAAAA,QAAQ,EAAEY,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBhB,QAHvB;AAILC,QAAAA,GAAG,EAAEW,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBI,EAJlB;AAKLlB,QAAAA,IAAI,EAAEU,MAAM,CAACG,KAAP,CAAaC,IAAb,CAAkBK;AALnB,OAAP;;AAQF;AACE,aAAOV,KAAP;AAjCJ;AAmCD,CApCD;;AAsCA,eAAeD,WAAf;AAEA,OAAO,MAAMY,OAAO,GAAIN,IAAD,KAAW;AAChCH,EAAAA,IAAI,EAAEnB,QAD0B;AAEhCsB,EAAAA;AAFgC,CAAX,CAAhB;AAIP,OAAO,MAAMO,OAAO,GAAG,OAAO;AAC5BV,EAAAA,IAAI,EAAElB;AADsB,CAAP,CAAhB;AAIP,OAAO,MAAMQ,MAAM,GAAIY,KAAD,KAAY;AAChCF,EAAAA,IAAI,EAAEhB,OAD0B;AAEhCkB,EAAAA;AAFgC,CAAZ,CAAf;AAIP,OAAO,MAAMS,YAAY,GAAIT,KAAD,KAAY;AACtCF,EAAAA,IAAI,EAAEjB,aADgC;AAEtCmB,EAAAA;AAFsC,CAAZ,CAArB","sourcesContent":["const SET_USER = \"SET_USER\";\r\nconst GET_USER = \"GET_USER\";\r\nconst REFRESH_TOKEN = \"REFRESH_TOKEN\";\r\n\r\nconst IS_AUTH = \"IS_AUTH\";\r\n\r\nlet initialState = {\r\n  token: \"\",\r\n  username: \"\",\r\n  _id: \"\",\r\n  role: \"\",\r\n  isAuth: false,\r\n  birthday: \"\",\r\n  phoneNumber: \"\",\r\n  city: \"\",\r\n  linkToInstagram: \"\",\r\n  linkToFacebook: \"\",\r\n  linkToLinkedIn: \"\",\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_BIRTHDAY:\r\n      return {\r\n        ...state,\r\n        birthday: action.value,\r\n      };\r\n    case SET_USER:\r\n      return {\r\n        ...state,\r\n        token: action.user.token,\r\n        username: action.user.username,\r\n        _id: action.user._id,\r\n        role: action.user.role,\r\n      };\r\n    case GET_USER:\r\n      debugger;\r\n      console.log(state);\r\n      break;\r\n    case IS_AUTH:\r\n      return {\r\n        ...state,\r\n        isAuth: action.value,\r\n      };\r\n    case REFRESH_TOKEN:\r\n      return {\r\n        ...state,\r\n        token: action.value.accessToken,\r\n        username: action.value.user.username,\r\n        _id: action.value.user.id,\r\n        role: action.value.user.roles,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n\r\nexport const setUser = (user) => ({\r\n  type: SET_USER,\r\n  user,\r\n});\r\nexport const getUser = () => ({\r\n  type: GET_USER,\r\n});\r\n\r\nexport const isAuth = (value) => ({\r\n  type: IS_AUTH,\r\n  value,\r\n});\r\nexport const refreshToken = (value) => ({\r\n  type: REFRESH_TOKEN,\r\n  value,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}