{"ast":null,"code":"import * as axios from \"axios\"; //import authMiddleware from \"../../../Backend/Middleware/authMiddleware.js\";\n\nimport store from \"../Redux/reduxStore.js\";\nimport { refreshToken } from \"../Redux/Reducers/userReducer.js\";\nexport const API_URL = \"http://localhost:3001/api\";\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL\n});\nlet originalRequest;\n/**\r\n * Прикрепляем токены к запросам\r\n */\n\n$api.interceptors.request.use(config => {\n  config.headers.Authorization = \"Bearer \" + store.getState().user.token;\n  return config;\n});\n/**\r\n * Перезагрузка токена\r\n */\n\n$api.interceptors.response.use(config => {\n  return config;\n}, async error => {\n  console.log(\"------error code--------\");\n  originalRequest = error.response.config;\n  console.log(originalRequest);\n  console.log(originalRequest.retry);\n\n  if (error.response.status === 401 && error.response.config && (originalRequest.retry === false || originalRequest.retry === undefined)) {\n    originalRequest.retry = true;\n    console.log(\"----обновленный original request----\");\n    console.log(originalRequest);\n    console.log(originalRequest.retry);\n\n    try {\n      const response = await $api.get(\"/refresh\");\n      console.log(\"----------response-----------------------\");\n      console.log(response);\n      await store.dispatch(refreshToken(response.accessToken)); //store.getState().user.token = response.accessToken;\n\n      return $api.request(originalRequest);\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    throw error;\n  }\n});\nexport default $api;","map":{"version":3,"sources":["A:/WorkPorjects/Skill Box/test 0/Frontend/src/Http/index.js"],"names":["axios","store","refreshToken","API_URL","$api","create","withCredentials","baseURL","originalRequest","interceptors","request","use","config","headers","Authorization","getState","user","token","response","error","console","log","retry","status","undefined","get","dispatch","accessToken"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,OAAO,MAAMC,OAAO,GAAG,2BAAhB;AAEP,MAAMC,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACxBC,EAAAA,eAAe,EAAE,IADO;AAExBC,EAAAA,OAAO,EAAEJ;AAFe,CAAb,CAAb;AAIA,IAAIK,eAAJ;AACA;AACA;AACA;;AACAJ,IAAI,CAACK,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA+BC,MAAD,IAAY;AACxCA,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+B,YAAYb,KAAK,CAACc,QAAN,GAAiBC,IAAjB,CAAsBC,KAAjE;AAEA,SAAOL,MAAP;AACD,CAJD;AAKA;AACA;AACA;;AACAR,IAAI,CAACK,YAAL,CAAkBS,QAAlB,CAA2BP,GAA3B,CACGC,MAAD,IAAY;AACV,SAAOA,MAAP;AACD,CAHH,EAIE,MAAOO,KAAP,IAAiB;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEAb,EAAAA,eAAe,GAAGW,KAAK,CAACD,QAAN,CAAeN,MAAjC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYb,eAAZ;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYb,eAAe,CAACc,KAA5B;;AAEA,MACEH,KAAK,CAACD,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAJ,KAAK,CAACD,QAAN,CAAeN,MADf,KAECJ,eAAe,CAACc,KAAhB,KAA0B,KAA1B,IAAmCd,eAAe,CAACc,KAAhB,KAA0BE,SAF9D,CADF,EAIE;AACAhB,IAAAA,eAAe,CAACc,KAAhB,GAAwB,IAAxB;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYb,eAAZ;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,eAAe,CAACc,KAA5B;;AACA,QAAI;AACF,YAAMJ,QAAQ,GAAG,MAAMd,IAAI,CAACqB,GAAL,CAAS,UAAT,CAAvB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,YAAMjB,KAAK,CAACyB,QAAN,CAAexB,YAAY,CAACgB,QAAQ,CAACS,WAAV,CAA3B,CAAN,CAJE,CAKF;;AACA,aAAOvB,IAAI,CAACM,OAAL,CAAaF,eAAb,CAAP;AACD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GApBD,MAoBO;AACL,UAAMA,KAAN;AACD;AACF,CAlCH;AAoCA,eAAef,IAAf","sourcesContent":["import * as axios from \"axios\";\r\n//import authMiddleware from \"../../../Backend/Middleware/authMiddleware.js\";\r\nimport store from \"../Redux/reduxStore.js\";\r\nimport { refreshToken } from \"../Redux/Reducers/userReducer.js\";\r\nexport const API_URL = \"http://localhost:3001/api\";\r\n\r\nconst $api = axios.create({\r\n  withCredentials: true,\r\n  baseURL: API_URL,\r\n});\r\nlet originalRequest;\r\n/**\r\n * Прикрепляем токены к запросам\r\n */\r\n$api.interceptors.request.use((config) => {\r\n  config.headers.Authorization = \"Bearer \" + store.getState().user.token;\r\n\r\n  return config;\r\n});\r\n/**\r\n * Перезагрузка токена\r\n */\r\n$api.interceptors.response.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  async (error) => {\r\n    console.log(\"------error code--------\");\r\n\r\n    originalRequest = error.response.config;\r\n    console.log(originalRequest);\r\n    console.log(originalRequest.retry);\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      error.response.config &&\r\n      (originalRequest.retry === false || originalRequest.retry === undefined)\r\n    ) {\r\n      originalRequest.retry = true;\r\n\r\n      console.log(\"----обновленный original request----\");\r\n      console.log(originalRequest);\r\n      console.log(originalRequest.retry);\r\n      try {\r\n        const response = await $api.get(\"/refresh\");\r\n        console.log(\"----------response-----------------------\");\r\n        console.log(response);\r\n        await store.dispatch(refreshToken(response.accessToken));\r\n        //store.getState().user.token = response.accessToken;\r\n        return $api.request(originalRequest);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n);\r\nexport default $api;\r\n"]},"metadata":{},"sourceType":"module"}